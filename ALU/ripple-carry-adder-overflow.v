/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module \ripple-carry-adder-overflow  (
  input [15:0] A,
  input [15:0] B,
  input C_in,
  output [15:0] Q,
  output C_out,
  output V
);
  wire [14:0] s0;
  wire [14:0] s1;
  wire [14:0] s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire C_out_temp;
  assign s0 = A[14:0];
  assign s4 = A[15];
  assign s1 = B[14:0];
  assign s5 = B[15];
  DIG_Add #(
    .Bits(15)
  )
  DIG_Add_i0 (
    .a( s0 ),
    .b( s1 ),
    .c_i( C_in ),
    .s( s2 ),
    .c_o( s3 )
  );
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i1 (
    .a( s4 ),
    .b( s5 ),
    .c_i( s3 ),
    .s( s6 ),
    .c_o( C_out_temp )
  );
  assign Q[14:0] = s2;
  assign Q[15] = s6;
  assign V = (C_out_temp ^ s3);
  assign C_out = C_out_temp;
endmodule
